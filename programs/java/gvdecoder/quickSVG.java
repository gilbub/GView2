package gvdecoder;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.event.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import gvdecoder.trace.*;
import java.util.*;
import java.awt.geom.GeneralPath;
//import java.awt.geom.GeneralPath;
import java.awt.Graphics2D.*;
import com.sun.image.codec.jpeg.*;
import java.awt.image.BufferedImage;
import java.awt.image.DataBuffer;
import java.net.URLConnection;


import org.apache.batik.swing.JSVGCanvas;
import org.apache.batik.swing.gvt.GVTTreeRendererAdapter;
import org.apache.batik.swing.gvt.GVTTreeRendererEvent;
import org.apache.batik.swing.svg.SVGDocumentLoaderAdapter;
import org.apache.batik.swing.svg.SVGDocumentLoaderEvent;
import org.apache.batik.swing.svg.GVTTreeBuilderAdapter;
import org.apache.batik.swing.svg.GVTTreeBuilderEvent;
import org.apache.batik.transcoder.image.JPEGTranscoder;
import org.apache.batik.transcoder.image .ImageTranscoder;
import org.apache.batik.transcoder.*;




public class quickSVG extends JInternalFrame {

int maxx,maxy;
ImageIcon imageicon;
String imagefilename;
JSVGCanvas svgCanvas;

public quickSVG(String filename){
	super("svg",
							 true, //resizable
							 true, //closable
							 true, //maximizable
			  true);//iconifiable

//wait until this file exists, as its being generated by an external
imagefilename=filename;
SetupWindow();
}

public quickSVG(){
	super("svg",
							 true, //resizable
							 true, //closable
							 true, //maximizable
			  true);//iconifiable
SetupWindow();
}


public void load(String filename){
	File file=new File(filename);
	while(!file.exists()){
		System.out.println("waiting for file existance");
		try{Thread.sleep(250);}catch(Exception e){;}
	}
this.imagefilename=filename;
try{
svgCanvas.setURI(file.toURL().toString());
}catch(Exception e){e.printStackTrace();}
}

public String getURI(String filename){

	File file=new File(filename);
	String res=null;
	try{
		res=file.toURL().toString();
	}catch(Exception e){e.printStackTrace();}
	return res;
}


public void SetupWindow(){
 svgCanvas = new JSVGCanvas();

 if (imagefilename!=null) load(imagefilename);

   svgCanvas.addSVGDocumentLoaderListener(new SVGDocumentLoaderAdapter() {
              public void documentLoadingStarted(SVGDocumentLoaderEvent e) {
                  System.out.println("Document Loading...");
              }
              public void documentLoadingCompleted(SVGDocumentLoaderEvent e) {
                  System.out.println("Document Loaded.");
              }
          });

          svgCanvas.addGVTTreeBuilderListener(new GVTTreeBuilderAdapter() {
              public void gvtBuildStarted(GVTTreeBuilderEvent e) {
                  System.out.println("Build Started...");
              }
              public void gvtBuildCompleted(GVTTreeBuilderEvent e) {
                  System.out.println("Build Done.");
                 // this.pack();
              }
          });

          svgCanvas.addGVTTreeRendererListener(new GVTTreeRendererAdapter() {
              public void gvtRenderingPrepare(GVTTreeRendererEvent e) {
                  System.out.println("Rendering Started...");
              }
              public void gvtRenderingCompleted(GVTTreeRendererEvent e) {
                  System.out.println("");
              }
        });


   this.getContentPane().add(svgCanvas,BorderLayout.CENTER);
   this.setSize(400,400);
   this.setLocation(10,10);
   this.setVisible(true);
}



public void SaveAsJPEG (String outfilename, float quality, float dpi){

        try{
        // Create a JPEG transcoder
        JPEGTranscoder t = new JPEGTranscoder();

        // Set the transcoding hints.
        t.addTranscodingHint(JPEGTranscoder.KEY_QUALITY,
                             new Float(quality));

		t.addTranscodingHint(ImageTranscoder.KEY_PIXEL_TO_MM, new Float(25.4f/dpi));

        // Create the transcoder input.
        String svgURI = getURI(imagefilename);
        TranscoderInput input = new TranscoderInput(svgURI);

        // Create the transcoder output.
        OutputStream ostream = new FileOutputStream(outfilename);
        TranscoderOutput output = new TranscoderOutput(ostream);

        // Save the image.
        t.transcode(input, output);

        // Flush and close the stream.
        ostream.flush();
        ostream.close();
	}catch(Exception e){e.printStackTrace();}
	}


}

