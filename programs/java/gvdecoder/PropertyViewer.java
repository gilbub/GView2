package gvdecoder;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.event.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.util.*;
import javax.swing.filechooser.*;

/** PropertyViewer is a front end for PropertyHelper - which contains a java.Properties
object for storing gview defaults. PropertyViewer allows display and change of user
directories. Properties are saved when the window is closed.*/


public class PropertyViewer extends JInternalFrame{

	GView ifd; //contains this
	PropertyHelper ph;

	boolean saved=false;




   	PropertyViewer(GView ifd) {
			super("Program properties",
						 true, //resizable
						 true, //closable
						 true, //maximizable
				  true);//iconifiable
            ph=PropertyHelper.getPropertyHelper();
			this.ifd=ifd;

			addInternalFrameListener(new InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent e){
			  saveCFG();}

			});




			JScrollPane sp=new JScrollPane(createCFGPanel());

			getContentPane().add(sp, BorderLayout.CENTER);


		//	setJMenuBar(createMenuBar());
			setSize(new Dimension(380,250));
			setLocation(5,5);
		}

        public void saveCFG(){ ph.saveCFG(); }


		public PropertyTextField createPropertyEditField(String name){
			PropertyTextField ptf=new PropertyTextField(name,ph.getProperty(name),10);

			ptf.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
			changeProperty(e);
			}
			});
			return ptf;
		}

		public void changeProperty(ActionEvent e){
			PropertyTextField ptf=(PropertyTextField)e.getSource();
			System.out.println(ptf.key+" "+ptf.getText());
			ph.setProperty(ptf.key,ptf.getText());
		}

		public void editFile(ActionEvent e){
			String absolutepath=ifd.fc.openDirectory();
			if (ifd.fc.approved){
			BrowseButton bb=(BrowseButton)e.getSource();
			ph.setProperty(bb.ptf.key,absolutepath);
			bb.ptf.setText(absolutepath);
			}
		}

		public JPanel createDirEditField(String description, String name){
			JPanel main=new JPanel();
			main.setLayout(new BoxLayout(main,BoxLayout.Y_AXIS));
			JLabel desc=new JLabel(description);
			desc.setAlignmentX(Component.CENTER_ALIGNMENT);
			main.add(desc);
			BrowseButton bb=new BrowseButton(name,ph.getProperty(name),10);
			//PropertyTextField ptf=createPropertyEditField(name);
			JPanel tmp=new JPanel();
			tmp.setLayout(new BoxLayout(tmp,BoxLayout.X_AXIS));
			tmp.add(Box.createRigidArea(new Dimension(5,0)));
			tmp.add(bb.ptf);
			//JButton browse=new JButton(".."));
			bb.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
			editFile(e);
			}
			});
			tmp.add(bb);
			tmp.add(Box.createRigidArea(new Dimension(5,0)));
			tmp.add(Box.createHorizontalGlue());
			main.add(tmp);
			main.setBorder(BorderFactory.createEtchedBorder());
			return main;
		}

		protected JPanel createCFGPanel(){
			 JPanel jp=new JPanel();
			//String[]


			jp.setLayout(new BoxLayout(jp,BoxLayout.Y_AXIS));


			//jp.add(new JLabel("ROI dir"));
			jp.add(createDirEditField("User directory (default location for data generated by gview)","User dir"));
			jp.add(Box.createRigidArea(new Dimension(0,10)));
			jp.add(createDirEditField("ROI (Intensity vs Time) data directory","ROI dir"));
            jp.add(Box.createRigidArea(new Dimension(0,10)));
			jp.add(createDirEditField("Navigator graphs directory","Navigator dir"));
			jp.add(Box.createRigidArea(new Dimension(0,10)));
            jp.add(createDirEditField("Permanent image storage (output used by other programs)","SavedImages dir"));
			jp.add(Box.createRigidArea(new Dimension(0,10)));
			jp.add(createDirEditField("User image storage (contents may be erased by the user)","TempImages dir"));
			jp.add(Box.createRigidArea(new Dimension(0,10)));
			jp.add(createDirEditField("Jython scripts directory - user generated scripts","Script dir"));
		    jp.add(Box.createRigidArea(new Dimension(0,10)));
			jp.add(createDirEditField("Data (raw data input files) default directory","DataFiles dir"));
		    jp.add(Box.createRigidArea(new Dimension(0,10)));
			jp.add(createDirEditField("LUTs directory (user created LUTs are stored here)","LUTs dir"));
            jp.add(Box.createRigidArea(new Dimension(0,10)));
			jp.add(createDirEditField("Gnuplot executable (- directory that has pgnuplot.exe)","gnuplotexecutable"));

			//jp.add(new JLabel("image save dir"));
			//jp.add(createDirEditField("imagedir"));

			//jp.add(new JLabel("scratch dir"));
			//jp.add(createDirEditField("scratchdir"));

/*
            JButton Framerate=new JButton("frame rate          ");
			Framerate.addActionListener(new ActionListener(){
			 public void actionPerformed(ActionEvent e){
			  changeFPS();
			 }
			});


			jp.add(createPropertyEditField("framerate"));

			jp.add(new JButton("spe window width    "));
			//jp.add(createPropertyEditField("windowwidth"));
*/
			return jp;

		}




	   public int getIntProperty(String key, String def){
		  return ph.getIntProperty(key,def);//Integer.parseInt(prp.getProperty(key,def));
		}


		public String getStringProperty(String key, String def){
			return ph.getStringProperty(key,def);// (String)prp.getProperty(key,def);
		}

       public boolean getBooleanProperty(String key, String def){
		   return ph.getBooleanProperty(key,def);//(prp.getProperty(key,def).equalsIgnoreCase("true"));
	   }

	   public void setProperty(String key, boolean value){
	       ph.setProperty(key,value);
	       //if (value) setProperty(key,"true");
	       //else setProperty(key,"false");
       }
       public void setProperty(String key, int value){
		   ph.setProperty(key,value);//setProperty(key,""+value);
	   }

}


class BrowseButton extends JButton{
PropertyTextField ptf;

public BrowseButton(String key, String val, int num){
 super("..");
 ptf=new PropertyTextField(key,val,num);
 }
}



class PropertyTextField extends JTextField{
String key;

public PropertyTextField(String key, String val, int num){
 super(val,num);
 this.key=key;
 }
}




