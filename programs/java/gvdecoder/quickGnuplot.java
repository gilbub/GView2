package gvdecoder;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.event.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import gvdecoder.trace.*;
import java.util.*;
import java.awt.geom.GeneralPath;
//import java.awt.geom.GeneralPath;
import java.awt.Graphics2D.*;
import com.sun.image.codec.jpeg.*;
import java.awt.image.BufferedImage;
import java.awt.image.DataBuffer;
import java.net.URLConnection;
public class quickGnuplot extends JInternalFrame implements InternalFrameListener,HtmlSaver{

int maxx,maxy;
ImageIcon imageicon;
String imagefilename;
String pltfilename;
String datfilename;
public static JythonHelper2 jh=null;

public String saveHtml(){
	/*1) find the saved images directory relative to the user directory... should always be
	     something like /SavedImages

	boolean userelativepath=false;
	String userdir=PropertyHelper.getPropertyHelper().getStringProperty("User dir",".");
	String saveimagedir=PropertyHelper.getPropertyHelper().getStringProperty("SavedImages dir",".");
	String pathname=saveimagedir;
	if (savedimagedir.indexOf(userdir)>-1){
		userelativepath=true;
	    pathname=saveimagedir.substring(userdir.length());
	}
	*/
	String namestring=null;
	try{
	if ((pltfilename!=null)&&(datfilename!=null)){
	 namestring= AnalysisHelper.getAnalysisHelper().copyImageData(datfilename,pltfilename,imagefilename);
	 String[] namestrings=namestring.split(",");
     File imagef=new File(namestrings[2]);
     File pltf=new File(namestrings[1]);
	 File datf=new File(namestrings[0]);
	 java.net.URL imageurl=imagef.toURI().toURL();
	 java.net.URL daturl=datf.toURI().toURL();
	 java.net.URL plturl=pltf.toURI().toURL();
	 String res="</pre><table border='1' cellspacing='0'><tr><th colspan='2'><img src='"+imageurl+"'></th></tr><tr><td align='right'><a href='"+daturl+"'>Data (.dat) file</a></td></tr><tr><td align='right'><a href='"+plturl+"'>Gnuplot (.plt) file</a></td></tr></table><pre>";
	 return res;
	}else{
	 namestring= AnalysisHelper.getAnalysisHelper().copyImageData(imagefilename);
     File imagef=new File(namestring);
     java.net.URL imageurl=imagef.toURI().toURL();
     return "<img src='"+imageurl+"'>";
     }
  }catch (Exception e){e.printStackTrace();}
  return null;
}


public quickGnuplot(String filename){
	super("quick",
							 true, //resizable
							 true, //closable
							 true, //maximizable
			  true);//iconifiable
File file=new File(filename);
while(!file.exists()){

	System.out.println("waiting for file existence");
	try{Thread.sleep(250);}catch(Exception e){;}
}
System.out.println("file exists and is readable="+file.canRead());
this.imagefilename=filename;
//wait until this file exists, as its being generated by an external
SetupWindow();
}

public quickGnuplot(String datfilename,  String pltfilename,String filename ){
	super("quick",
							 true, //resizable
							 true, //closable
							 true, //maximizable
			  true);//iconifiable
File file=new File(filename);
int timeout=0;
while(!file.exists()){
	System.out.println("waiting for file existence");
	try{Thread.sleep(250);}catch(Exception e){;}
	timeout+=1;
	if (timeout>6) {
		System.out.println("file not found timeout error:"+filename);
		break;
	}
}
System.out.println("file exists and is readable="+file.canRead());

this.imagefilename=filename;
this.pltfilename=pltfilename;
this.datfilename=datfilename;
//wait until this file exists, as its being generated by an external
SetupWindow();


}


public void SetupWindow(){
   JLabel label=null;
	   try{
          imageicon= new ImageIcon(imagefilename);
          label = new JLabel( imageicon, JLabel.CENTER);
	    }catch(Exception e){e.printStackTrace();}


   this.getContentPane().add(label,BorderLayout.CENTER);
   setSize(new Dimension(imageicon.getIconWidth()+25,imageicon.getIconHeight()+25));
   setLocation(10,10);
   addInternalFrameListener(this);
}

 /*internal frame events*/
  public void internalFrameClosing(InternalFrameEvent e) {
    if (jh!=null)
     jh.unsetSaveHtml(this);
	//displayMessage("Internal frame closing", e);

    }

    public void internalFrameClosed(InternalFrameEvent e) {
    if (jh!=null)
	     jh.unsetSaveHtml(this);
    }

    public void internalFrameOpened(InternalFrameEvent e) {
	//displayMessage("Internal frame opened", e);
    }

    public void internalFrameIconified(InternalFrameEvent e) {
	//displayMessage("Internal frame iconified", e);
    }

    public void internalFrameDeiconified(InternalFrameEvent e) {
	//displayMessage("Internal frame deiconified", e);
    }

    public void internalFrameActivated(InternalFrameEvent e) {
	System.out.println("internal frame activated");
       if (jh!=null){
		   System.out.println("Setting selected plot");
		   jh.setSaveHtml(this,"import gnuplot");
	   }
	//displayMessage("Internal frame activated", e);
    }

    public void internalFrameDeactivated(InternalFrameEvent e) {
	//displayMessage("Internal frame deactivated", e);
    }

}

